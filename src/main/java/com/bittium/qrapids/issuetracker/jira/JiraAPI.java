package com.bittium.qrapids.issuetracker.jira;

import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import com.atlassian.jira.rest.client.api.JiraRestClient;
import com.atlassian.jira.rest.client.api.JiraRestClientFactory;
import com.atlassian.jira.rest.client.api.domain.AssigneeType;
import com.atlassian.jira.rest.client.api.domain.BasicIssue;
import com.atlassian.jira.rest.client.api.domain.BasicProject;
import com.atlassian.jira.rest.client.api.domain.IssueType;
import com.atlassian.jira.rest.client.api.domain.input.ComponentInput;
import com.atlassian.jira.rest.client.api.domain.input.IssueInput;
import com.atlassian.jira.rest.client.api.domain.input.IssueInputBuilder;
import com.atlassian.jira.rest.client.internal.async.AsynchronousJiraRestClientFactory;
import com.bittium.qrapids.issuetracker.IssueAPI;
import com.bittium.qrapids.issuetracker.IssueCreatedResponse;

public class JiraAPI implements IssueAPI<JiraRestClient> {

    // TODO: RytiVei: Read these from config
    private static final String COMPONENT_NAME = "generated_by_qrapids";
    private static final String COMPONENT_DESCRIPTION =
            "This issue was generated by Q-Rapids dashboard";
    private static final String COMPONENT_LEAD = "Veikko Rytivaara";

    public void createClient(String serverURI, String username, String password) {
        final JiraRestClientFactory jiraRestClientFactory = new AsynchronousJiraRestClientFactory();
        this.mClient = jiraRestClientFactory
                .createWithBasicHttpAuthentication(URI.create(serverURI), username, password);
    }

    public IssueCreatedResponse createIssue(String projectname, String type, String summary,
            String description) {

        IssueCreatedResponse response = new IssueCreatedResponse();

        BasicProject project = null;
        for (BasicProject p : this.mClient.getProjectClient().getAllProjects().claim()) {
            if (p.getKey().equals(projectname)) {
                project = p;
            }
        }
        if (project == null) {
            // TODO: RytiVei: Throw exception and handle it
        }

        IssueType issueType = null;
        for (IssueType t : this.mClient.getMetadataClient().getIssueTypes().claim()) {
            if (t.getName().equals(type)) {
                issueType = t;
            }
        }
        if (issueType == null) {
            // TODO: RytiVei: Throw exception and handle it
        }

        ComponentInput componentInput = new ComponentInput(COMPONENT_NAME, COMPONENT_DESCRIPTION,
                COMPONENT_LEAD, AssigneeType.UNASSIGNED);
        this.mClient.getComponentClient().createComponent(project.getKey(), componentInput);
        List<String> components = new ArrayList<>();
        components.add(COMPONENT_NAME);
        IssueInputBuilder inputBuilder = new IssueInputBuilder(project, issueType, summary);
        inputBuilder.setDescription(description);
        inputBuilder.setComponentsNames(components);
        IssueInput input = inputBuilder.build();
        BasicIssue basicIssue = this.mClient.getIssueClient().createIssue(input).claim();
        response = new IssueCreatedResponse(basicIssue.getKey(), basicIssue.getSelf().toString());

        return response;
    }

    private JiraRestClient mClient;
}
